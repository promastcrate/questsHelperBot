import logging
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.middlewares import BaseMiddleware
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
import requests
import os
from dotenv import load_dotenv

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
API_URL = os.getenv("API_URL")

bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

class LoggingMiddleware(BaseMiddleware):
    async def on_pre_process_message(self, message: types.Message, data: dict):
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

dp.middleware.setup(LoggingMiddleware())

main_menu = ReplyKeyboardMarkup(resize_keyboard=True).add(
    KeyboardButton("üèôÔ∏è –ì–æ—Ä–æ–¥–∞"),
    KeyboardButton("üîç –ö–≤–µ—Å—Ç—ã"),
    KeyboardButton("üìç –õ–æ–∫–∞—Ü–∏–∏"),
    KeyboardButton("üë§ –ì–∏–¥—ã"),
    KeyboardButton("üìù –û—Ç–∑—ã–≤—ã"),
    KeyboardButton("üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
)

class UserStates(StatesGroup):
    main_menu = State()
    cities = State()
    quests = State()
    locations = State()
    guides = State()
    reviews = State()
    support = State()
    add_review = State()
    add_review_quest = State()
    add_review_rating = State()
    add_review_comment = State()
    book_quest = State()

@dp.message_handler(commands=["start"], state="*")
async def start(message: types.Message):
    telegram_user_id = message.from_user.id

    response = requests.get(f"{API_URL}participants/by-telegram-id/{telegram_user_id}")
    if response.status_code != 404:
        participants = response.json()
        if participants:
            await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu)
    else:
        user_data = {
            "FirstName": message.from_user.first_name,
            "LastName": message.from_user.last_name or "",
            "TelegramUserID": telegram_user_id
        }
        response = requests.post(f"{API_URL}participants/", json=user_data)
        if response.status_code == 201:
            await message.answer("üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                                 reply_markup=main_menu)
        else:
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞: {response.status_code} - {response.text}")

    await UserStates.main_menu.set()

@dp.message_handler(state=UserStates.main_menu)
async def main_menu_handler(message: types.Message, state: FSMContext):
    if message.text == "üèôÔ∏è –ì–æ—Ä–æ–¥–∞":
        await handle_cities(message, state)
    elif message.text == "üîç –ö–≤–µ—Å—Ç—ã":
        await handle_quests(message, state)
    elif message.text == "üìç –õ–æ–∫–∞—Ü–∏–∏":
        await handle_locations(message, state)
    elif message.text == "üë§ –ì–∏–¥—ã":
        await handle_guides(message, state)
    elif message.text == "üìù –û—Ç–∑—ã–≤—ã":
        await handle_reviews(message, state)
    elif message.text == "üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞":
        await UserStates.support.set()
        await message.answer("üì© –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:")

def paginate_text(text, chunk_size=1000):
    return [text[i:i + chunk_size] for i in range(0, len(text), chunk_size)]

def paginate_list(items, items_per_page=5):
    return [items[i:i + items_per_page] for i in range(0, len(items), items_per_page)]

async def get_unique_countries(api_url):
    try:
        response = requests.get(f"{api_url}cities/")
        if response.status_code != 200:
            return []
        cities = response.json()
        countries = list(set(city["Country"] for city in cities))
        return countries
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å—Ç—Ä–∞–Ω: {e}")
        return []

async def get_unique_cities(api_url):
    try:
        response = requests.get(f"{api_url}cities/")
        if response.status_code != 200:
            return []
        cities = response.json()
        unique_cities = list(set(city["CityName"] for city in cities))
        return unique_cities
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤: {e}")
        return []

async def get_unique_quests(api_url):
    try:
        response = requests.get(f"{api_url}quests/")
        if response.status_code != 200:
            return []
        quests = response.json()
        unique_quests = [{'QuestID': quest['QuestID'], 'QuestName': quest['QuestName']} for quest in quests]
        return unique_quests
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–≤–µ—Å—Ç–æ–≤: {e}")
        return []

async def handle_cities(message: types.Message, state: FSMContext):
    await UserStates.cities.set()
    try:
        countries = await get_unique_countries(API_URL)
        if not countries:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å—Ç—Ä–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        keyboard = InlineKeyboardMarkup()
        for country in countries:
            keyboard.add(InlineKeyboardButton(country, callback_data=f"filter_country_{country}"))
        keyboard.add(InlineKeyboardButton("üåç –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≥–æ—Ä–æ–¥–∞", callback_data="filter_country_all"))

        await message.answer("üåç –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≥–æ—Ä–æ–¥–æ–≤:", reply_markup=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ—Ä–æ–¥–æ–≤: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def handle_quests(message: types.Message, state: FSMContext):
    await UserStates.quests.set()
    try:
        cities = await get_unique_cities(API_URL)
        if not cities:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        keyboard = InlineKeyboardMarkup()
        for city in cities:
            keyboard.add(InlineKeyboardButton(city, callback_data=f"filter_quest_city_{city}"))
        keyboard.add(InlineKeyboardButton("üåç –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–≤–µ—Å—Ç—ã", callback_data="filter_quest_city_all"))

        await message.answer("üîç –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫–≤–µ—Å—Ç–æ–≤:", reply_markup=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–≤–µ—Å—Ç–æ–≤: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def handle_locations(message: types.Message, state: FSMContext):
    await UserStates.locations.set()
    try:
        cities = await get_unique_cities(API_URL)
        if not cities:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        keyboard = InlineKeyboardMarkup()
        for city in cities:
            keyboard.add(InlineKeyboardButton(city, callback_data=f"filter_city_{city}"))
        keyboard.add(InlineKeyboardButton("üåç –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ª–æ–∫–∞—Ü–∏–∏", callback_data="filter_city_all"))

        await message.answer("üìç –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ª–æ–∫–∞—Ü–∏–π:", reply_markup=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ª–æ–∫–∞—Ü–∏–π: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def handle_guides(message: types.Message, state: FSMContext):
    await UserStates.guides.set()
    try:
        response = requests.get(f"{API_URL}guides/")
        if response.status_code != 200:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥–∏–¥–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        guides = response.json()
        guides_pages = paginate_list(guides)
        await state.update_data(pages=guides_pages, current_page=0, prefix="guide")
        await send_paginated_list(message.from_user.id, guides_pages[0], "guide", state)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥–∏–¥–æ–≤: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def handle_reviews(message: types.Message, state: FSMContext):
    await UserStates.reviews.set()
    try:
        quests = await get_unique_quests(API_URL)
        if not quests:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–≤–µ—Å—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        keyboard = InlineKeyboardMarkup()
        for quest in quests:
            keyboard.add(
                InlineKeyboardButton(quest['QuestName'], callback_data=f"filter_review_quest_{quest['QuestID']}"))
        keyboard.add(InlineKeyboardButton("üåç –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –æ—Ç–∑—ã–≤—ã", callback_data="filter_review_quest_all"))
        keyboard.add(InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data="add_review"))

        await message.answer("üìù –í—ã–±–µ—Ä–∏—Ç–µ –∫–≤–µ—Å—Ç –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç–∑—ã–≤–æ–≤ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –æ—Ç–∑—ã–≤:", reply_markup=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–∑—ã–≤–æ–≤: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def send_paginated_list(user_id, items, prefix, state: FSMContext):
    keyboard = InlineKeyboardMarkup()
    for item in items:
        if prefix == "city":
            keyboard.add(InlineKeyboardButton(item["CityName"], callback_data=f"{prefix}_{item['CityID']}"))
        elif prefix == "quest":
            keyboard.add(InlineKeyboardButton(item["QuestName"], callback_data=f"{prefix}_{item['QuestID']}"))
        elif prefix == "location":
            keyboard.add(InlineKeyboardButton(item["LocationName"], callback_data=f"{prefix}_{item['LocationID']}"))
        elif prefix == "guide":
            keyboard.add(InlineKeyboardButton(f"{item['FirstName']} {item['LastName']}",
                                              callback_data=f"{prefix}_{item['GuideID']}"))
        elif prefix == "review":
            keyboard.add(InlineKeyboardButton(f"{item['Comment']} (–†–µ–π—Ç–∏–Ω–≥: {item['Rating']})",
                                              callback_data=f"{prefix}_{item['ReviewID']}"))

    keyboard.row(
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{prefix}_prev_page"),
        InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"{prefix}_next_page")
    )
    keyboard.add(InlineKeyboardButton("üè† –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu"))
    await bot.send_message(user_id, f"–í—ã–±–µ—Ä–∏—Ç–µ {prefix}:", reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data.endswith("_prev_page") or c.data.endswith("_next_page"), state="*")
async def pagination_handler(callback_query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    current_page = data.get("current_page", 0)
    pages = data.get("pages")
    prefix = data.get("prefix")

    if callback_query.data.endswith("_prev_page"):
        current_page -= 1
    elif callback_query.data.endswith("_next_page"):
        current_page += 1

    if current_page < 0:
        current_page = 0
    elif current_page >= len(pages):
        current_page = len(pages) - 1

    await state.update_data(current_page=current_page)
    await send_paginated_list(callback_query.from_user.id, pages[current_page], prefix, state)
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data == "back_to_main_menu", state="*")
async def back_to_main_menu_handler(callback_query: types.CallbackQuery, state: FSMContext):
    await UserStates.main_menu.set()
    await bot.send_message(callback_query.from_user.id, "üè† –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu)
    await callback_query.answer()

@dp.message_handler(state=UserStates.support)
async def support_message_handler(message: types.Message, state: FSMContext):
    user_message = message.text
    telegram_user_id = message.from_user.id

    participant_response = requests.get(f"{API_URL}participants/by-telegram-id/{telegram_user_id}/")
    if participant_response.status_code != 200:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    participant = participant_response.json()
    participant_id = participant['ParticipantID']

    question_data = {
        "ParticipantID": participant_id,
        "QuestionText": user_message
    }
    response = requests.post(f"{API_URL}questions/", json=question_data)

    if response.status_code == 201:
        await message.answer("üì© –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
    else:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    await UserStates.main_menu.set()
    await message.answer("üè† –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu)

@dp.callback_query_handler(lambda c: c.data.startswith("city_"), state=UserStates.cities)
async def city_callback_handler(callback_query: types.CallbackQuery, state: FSMContext):
    city_id = callback_query.data.split("_")[1]
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üè† –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu"))
    try:
        response = requests.get(f"{API_URL}cities/{city_id}/")
        if response.status_code != 200:
            await bot.send_message(callback_query.from_user.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ—Ä–æ–¥–µ.")
            return
        city = response.json()
        description_parts = paginate_text(city['Description'])
        await state.update_data(city_description=description_parts, current_page=0, city_name=city['CityName'])
        await send_paginated_text(callback_query.from_user.id, city['CityName'], description_parts, 0, state)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ—Ä–æ–¥–µ: {e}")
        await bot.send_message(callback_query.from_user.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data.startswith("quest_"), state=UserStates.quests)
async def quest_callback_handler(callback_query: types.CallbackQuery, state: FSMContext):
    quest_id = callback_query.data.split("_")[1]
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–≤–µ—Å—Ç", callback_data=f"book_quest_{quest_id}"))
    keyboard.add(InlineKeyboardButton("üè† –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu"))
    try:
        response = requests.get(f"{API_URL}quests/{quest_id}/")
        if response.status_code != 200:
            await bot.send_message(callback_query.from_user.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–≤–µ—Å—Ç–µ.")
            return
        quest = response.json()
        description_parts = paginate_text(quest['Description'])
        await state.update_data(quest_description=description_parts, current_page=0, quest_name=quest['QuestName'])
        await send_paginated_text(callback_query.from_user.id, quest['QuestName'], description_parts, 0, state)
        await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–≤–µ—Å—Ç–µ: {e}")
        await bot.send_message(callback_query.from_user.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data.startswith("book_quest_"), state="*")
async def book_quest_handler(callback_query: types.CallbackQuery, state: FSMContext):
    quest_id = callback_query.data.split("_")[2]
    telegram_user_id = callback_query.from_user.id

    response = requests.get(f"{API_URL}participants/by-telegram-id/{telegram_user_id}/")
    if response.status_code != 200:
        await bot.send_message(callback_query.from_user.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    participant = response.json()
    participant_id = participant['ParticipantID']

    booking_data = {
        "QuestID": quest_id,
        "ParticipantID": participant_id
    }

    response = requests.post(f"{API_URL}quest-participants/", json=booking_data)
    if response.status_code == 201:
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("üè† –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu"))

        await bot.send_message(callback_query.from_user.id, "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–≤–µ—Å—Ç!", reply_markup=keyboard)
    else:
        await bot.send_message(callback_query.from_user.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ –∫–≤–µ—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ –∫–≤–µ—Å—Ç: {response.status_code} - {response.text}")

    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data.startswith("location_"), state=UserStates.locations)
async def location_callback_handler(callback_query: types.CallbackQuery, state: FSMContext):
    location_id = callback_query.data.split("_")[1]
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üè† –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu"))
    try:
        response = requests.get(f"{API_URL}locations/{location_id}/")
        if response.status_code != 200:
            await bot.send_message(callback_query.from_user.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–æ–∫–∞—Ü–∏–∏.")
            return
        location = response.json()
        description_parts = paginate_text(location['Description'])
        await state.update_data(location_description=description_parts, current_page=0,
                                location_name=location['LocationName'])
        await send_paginated_text(callback_query.from_user.id, location['LocationName'], description_parts, 0, state)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–æ–∫–∞—Ü–∏–∏: {e}")
        await bot.send_message(callback_query.from_user.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data.startswith("guide_"), state=UserStates.guides)
async def guide_callback_handler(callback_query: types.CallbackQuery, state: FSMContext):
    guide_id = callback_query.data.split("_")[1]

    try:
        response = requests.get(f"{API_URL}guides/{guide_id}/")
        if response.status_code != 200:
            await bot.send_message(callback_query.from_user.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–∏–¥–µ.")
            return
        guide = response.json()
        guide_info = (
            f"–ò–º—è: {guide['FirstName']}\n"
            f"–§–∞–º–∏–ª–∏—è: {guide['LastName']}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {guide['Phone']}\n"
            f"Email: {guide['Email']}\n"
            f"–û–ø—ã—Ç: {guide['Experience']} –ª–µ—Ç"
        )
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("üè† –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu"))

        await bot.send_message(callback_query.from_user.id, guide_info, reply_markup=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–∏–¥–µ: {e}")
        await bot.send_message(callback_query.from_user.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data.startswith("filter_country_"), state=UserStates.cities)
async def filter_cities_by_country(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        country = callback_query.data.split("_")[-1]

        if country == "all":
            response = requests.get(f"{API_URL}cities/")
        else:
            response = requests.get(f"{API_URL}cities/?Country={country}")

        if response.status_code != 200:
            await bot.send_message(callback_query.from_user.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤.")
            return

        cities = response.json()
        cities_pages = paginate_list(cities)
        await state.update_data(pages=cities_pages, current_page=0, prefix="city")
        await send_paginated_list(callback_query.from_user.id, cities_pages[0], "city", state)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≥–æ—Ä–æ–¥–æ–≤: {e}")
        await bot.send_message(callback_query.from_user.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data.startswith("filter_city_"), state=UserStates.locations)
async def filter_locations_by_city(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        city = callback_query.data.split("_")[-1]

        if city == "all":
            response = requests.get(f"{API_URL}locations/")
        else:
            cities_response = requests.get(f"{API_URL}cities/")
            if cities_response.status_code != 200:
                await bot.send_message(callback_query.from_user.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤.")
                return

            cities = cities_response.json()
            city_id = None
            for c in cities:
                if c["CityName"] == city:
                    city_id = c["CityID"]
                    break

            if not city_id:
                await bot.send_message(callback_query.from_user.id, "‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

            response = requests.get(f"{API_URL}locations/?CityID={city_id}")

        if response.status_code != 200:
            await bot.send_message(callback_query.from_user.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ª–æ–∫–∞—Ü–∏–π.")
            return

        locations = response.json()
        locations_pages = paginate_list(locations)
        await state.update_data(pages=locations_pages, current_page=0, prefix="location")
        await send_paginated_list(callback_query.from_user.id, locations_pages[0], "location", state)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ª–æ–∫–∞—Ü–∏–π: {e}")
        await bot.send_message(callback_query.from_user.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data.startswith("filter_quest_city_"), state=UserStates.quests)
async def filter_quests_by_city(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        city = callback_query.data.split("_")[-1]

        if city == "all":
            response = requests.get(f"{API_URL}quests/")
        else:
            cities_response = requests.get(f"{API_URL}cities/")
            if cities_response.status_code != 200:
                await bot.send_message(callback_query.from_user.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤.")
                return

            cities = cities_response.json()
            city_id = None
            for c in cities:
                if c["CityName"] == city:
                    city_id = c["CityID"]
                    break

            if not city_id:
                await bot.send_message(callback_query.from_user.id, "‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

            response = requests.get(f"{API_URL}quests/?CityID={city_id}")

        if response.status_code != 200:
            await bot.send_message(callback_query.from_user.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–≤–µ—Å—Ç–æ–≤.")
            return

        quests = response.json()
        quests_pages = paginate_list(quests)
        await state.update_data(pages=quests_pages, current_page=0, prefix="quest")
        await send_paginated_list(callback_query.from_user.id, quests_pages[0], "quest", state)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫–≤–µ—Å—Ç–æ–≤: {e}")
        await bot.send_message(callback_query.from_user.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data.startswith("review_"), state=UserStates.reviews)
async def review_callback_handler(callback_query: types.CallbackQuery, state: FSMContext):
    review_id = callback_query.data.split("_")[1]

    try:
        response = requests.get(f"{API_URL}reviews/{review_id}/")
        if response.status_code != 200:
            await bot.send_message(callback_query.from_user.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ç–∑—ã–≤–µ.")
            return

        review = response.json()

        participant_id = review['ParticipantID']
        participant_response = requests.get(f"{API_URL}participants/{participant_id}/")
        if participant_response.status_code != 200:
            await bot.send_message(callback_query.from_user.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–µ.")
            return

        participant = participant_response.json()

        quest_id = review['QuestID']
        quest_response = requests.get(f"{API_URL}quests/{quest_id}/")
        if quest_response.status_code != 200:
            await bot.send_message(callback_query.from_user.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–≤–µ—Å—Ç–µ.")
            return

        quest = quest_response.json()

        review_info = (
            f"–û—Ç–∑—ã–≤ –æ—Ç: {participant['FirstName']} {participant['LastName']}\n"
            f"–ö–≤–µ—Å—Ç: {quest['QuestName']}\n" 
            f"–†–µ–π—Ç–∏–Ω–≥: {review['Rating']}\n"
            f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {review['Comment']}\n"
            f"–î–∞—Ç–∞: {review['ReviewDate']}"
        )

        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("üè† –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu"))

        await bot.send_message(callback_query.from_user.id, review_info, reply_markup=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ç–∑—ã–≤–µ: {e}")
        await bot.send_message(callback_query.from_user.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data.startswith("filter_review_quest_"), state=UserStates.reviews)
async def filter_reviews_by_quest(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        quest_id = callback_query.data.split("_")[-1]

        if quest_id == "all":
            response = requests.get(f"{API_URL}reviews/")
        else:
            response = requests.get(f"{API_URL}reviews/?QuestID={quest_id}")

        if response.status_code != 200:
            await bot.send_message(callback_query.from_user.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –æ—Ç–∑—ã–≤–æ–≤.")
            return

        reviews = response.json()
        reviews_pages = paginate_list(reviews)
        await state.update_data(pages=reviews_pages, current_page=0, prefix="review")
        await send_paginated_list(callback_query.from_user.id, reviews_pages[0], "review", state)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç–∑—ã–≤–æ–≤: {e}")
        await bot.send_message(callback_query.from_user.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        await callback_query.answer()

async def send_paginated_text(user_id, title, text_parts, current_page, state: FSMContext):
    total_pages = len(text_parts)
    current_page = max(0, min(current_page, total_pages - 1))

    text = text_parts[current_page]
    keyboard = InlineKeyboardMarkup()
    if current_page > 0:
        keyboard.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="prev_page"))
    if current_page < total_pages - 1:
        keyboard.add(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data="next_page"))
    keyboard.add(InlineKeyboardButton("üè† –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu"))

    if current_page == 0:
        message = await bot.send_message(user_id, f"{title}\n\n{text}", reply_markup=keyboard)
        await state.update_data(message_id=message.message_id)
    else:
        try:
            message_id = (await state.get_data()).get("message_id")
            await bot.edit_message_text(
                chat_id=user_id,
                message_id=message_id,
                text=f"{title}\n\n{text}",
                reply_markup=keyboard
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            message = await bot.send_message(user_id, f"{title}\n\n{text}", reply_markup=keyboard)
            await state.update_data(message_id=message.message_id)

    await state.update_data(current_page=current_page)

@dp.callback_query_handler(lambda c: c.data in ["prev_page", "next_page"], state="*")
async def text_pagination_handler(callback_query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    current_page = data.get("current_page", 0)
    text_parts = data.get("city_description") or data.get("quest_description") or data.get("location_description")
    title = data.get("city_name") or data.get("quest_name") or data.get("location_name")

    if text_parts is None:
        await callback_query.answer("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    if callback_query.data == "prev_page":
        current_page -= 1
    elif callback_query.data == "next_page":
        current_page += 1

    if current_page < 0:
        current_page = 0
    elif current_page >= len(text_parts):
        current_page = len(text_parts) - 1

    await send_paginated_text(callback_query.from_user.id, title, text_parts, current_page, state)
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data == "add_review", state=UserStates.reviews)
async def add_review_start(callback_query: types.CallbackQuery, state: FSMContext):
    await UserStates.add_review_quest.set()

    quests = await get_unique_quests(API_URL)
    if not quests:
        await callback_query.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–≤–µ—Å—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    keyboard = InlineKeyboardMarkup()
    for quest in quests:
        keyboard.add(InlineKeyboardButton(quest['QuestName'], callback_data=f"select_quest_{quest['QuestID']}"))

    await callback_query.message.answer("üìù –í—ã–±–µ—Ä–∏—Ç–µ –∫–≤–µ—Å—Ç, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤:", reply_markup=keyboard)
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data.startswith("select_quest_"), state=UserStates.add_review_quest)
async def select_quest_for_review(callback_query: types.CallbackQuery, state: FSMContext):
    quest_id = callback_query.data.split("_")[2]
    await state.update_data(selected_quest_id=quest_id)
    await UserStates.add_review_rating.set()

    await callback_query.message.answer("üìä –í–≤–µ–¥–∏—Ç–µ —Ä–µ–π—Ç–∏–Ω–≥ –æ—Ç 1 –¥–æ 5:")
    await callback_query.answer()

@dp.message_handler(state=UserStates.add_review_rating)
async def enter_review_rating(message: types.Message, state: FSMContext):
    try:
        rating = int(message.text)
        if rating < 1 or rating > 5:
            await message.answer("üìä –†–µ–π—Ç–∏–Ω–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 5. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return
    except ValueError:
        await message.answer("üìä –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5.")
        return

    await state.update_data(rating=rating)
    await UserStates.add_review_comment.set()

    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –æ—Ç–∑—ã–≤—É:")

@dp.message_handler(state=UserStates.add_review_comment)
async def enter_review_comment(message: types.Message, state: FSMContext):
    comment = message.text
    data = await state.get_data()
    quest_id = data.get("selected_quest_id")
    rating = data.get("rating")

    telegram_user_id = message.from_user.id

    response = requests.get(f"{API_URL}participants/by-telegram-id/{telegram_user_id}/")
    if response.status_code != 200:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    participant = response.json()
    participant_id = participant['ParticipantID']

    review_data = {
        "QuestID": quest_id,
        "ParticipantID": participant_id,
        "Rating": rating,
        "Comment": comment
    }

    response = requests.post(f"{API_URL}reviews/", json=review_data)
    if response.status_code == 201:
        await message.answer("‚úÖ –û—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
    else:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞: {response.status_code} - {response.text}")

    await UserStates.main_menu.set()
    await message.answer("üè† –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu)

if __name__ == "__main__":
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    executor.start_polling(dp, skip_updates=True)